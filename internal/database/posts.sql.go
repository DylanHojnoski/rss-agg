// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: posts.sql

package database

import (
	"context"
	"database/sql"
	"time"

	"github.com/google/uuid"
)

const createPost = `-- name: CreatePost :one
INSERT INTO posts (id, created_at, updated_at, title, description, published_at, audio, duration, feed_id)
VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9)
RETURNING id, created_at, updated_at, title, description, published_at, audio, duration, feed_id
`

type CreatePostParams struct {
	ID          uuid.UUID
	CreatedAt   time.Time
	UpdatedAt   time.Time
	Title       string
	Description sql.NullString
	PublishedAt time.Time
	Audio       string
	Duration    sql.NullString
	FeedID      uuid.UUID
}

func (q *Queries) CreatePost(ctx context.Context, arg CreatePostParams) (Post, error) {
	row := q.db.QueryRowContext(ctx, createPost,
		arg.ID,
		arg.CreatedAt,
		arg.UpdatedAt,
		arg.Title,
		arg.Description,
		arg.PublishedAt,
		arg.Audio,
		arg.Duration,
		arg.FeedID,
	)
	var i Post
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Title,
		&i.Description,
		&i.PublishedAt,
		&i.Audio,
		&i.Duration,
		&i.FeedID,
	)
	return i, err
}

const getPostsForFeed = `-- name: GetPostsForFeed :many
SELECT posts.id, posts.created_at, posts.updated_at, posts.title, posts.description, posts.published_at, posts.audio, posts.duration, posts.feed_id, feeds.name AS feed_name,
CASE 
    WHEN post_views.id IS NOT NULL THEN TRUE
    ELSE FALSE
END AS viewed
FROM posts
JOIN feeds ON posts.feed_id = feeds.id
LEFT JOIN post_views ON posts.id = post_views.post_id AND ($3::uuid IS NULL OR $3::uuid = post_views.user_id)
WHERE feed_id = $1 AND ($4::bool = FALSE OR post_views.id IS NULL)
ORDER BY published_at DESC 
LIMIT $2
`

type GetPostsForFeedParams struct {
	FeedID   uuid.UUID
	Limit    int32
	Userid   uuid.UUID
	Unviewed bool
}

type GetPostsForFeedRow struct {
	ID          uuid.UUID
	CreatedAt   time.Time
	UpdatedAt   time.Time
	Title       string
	Description sql.NullString
	PublishedAt time.Time
	Audio       string
	Duration    sql.NullString
	FeedID      uuid.UUID
	FeedName    string
	Viewed      bool
}

func (q *Queries) GetPostsForFeed(ctx context.Context, arg GetPostsForFeedParams) ([]GetPostsForFeedRow, error) {
	rows, err := q.db.QueryContext(ctx, getPostsForFeed,
		arg.FeedID,
		arg.Limit,
		arg.Userid,
		arg.Unviewed,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetPostsForFeedRow
	for rows.Next() {
		var i GetPostsForFeedRow
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Title,
			&i.Description,
			&i.PublishedAt,
			&i.Audio,
			&i.Duration,
			&i.FeedID,
			&i.FeedName,
			&i.Viewed,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getPostsForFeedAfterDate = `-- name: GetPostsForFeedAfterDate :many
SELECT posts.id, posts.created_at, posts.updated_at, posts.title, posts.description, posts.published_at, posts.audio, posts.duration, posts.feed_id, feeds.name AS feed_name,
CASE 
    WHEN post_views.id IS NOT NULL THEN TRUE
    ELSE FALSE
END AS viewed
FROM posts
JOIN feeds ON posts.feed_id = feeds.id
LEFT JOIN post_views ON posts.id = post_views.post_id AND ($4::uuid IS NULL OR $4::uuid = post_views.user_id)
WHERE feed_id = $1 AND published_at > $2 AND ($5::bool = FALSE OR post_views.id IS NULL)
ORDER BY published_at ASC 
LIMIT $3
`

type GetPostsForFeedAfterDateParams struct {
	FeedID      uuid.UUID
	PublishedAt time.Time
	Limit       int32
	Userid      uuid.UUID
	Unviewed    bool
}

type GetPostsForFeedAfterDateRow struct {
	ID          uuid.UUID
	CreatedAt   time.Time
	UpdatedAt   time.Time
	Title       string
	Description sql.NullString
	PublishedAt time.Time
	Audio       string
	Duration    sql.NullString
	FeedID      uuid.UUID
	FeedName    string
	Viewed      bool
}

func (q *Queries) GetPostsForFeedAfterDate(ctx context.Context, arg GetPostsForFeedAfterDateParams) ([]GetPostsForFeedAfterDateRow, error) {
	rows, err := q.db.QueryContext(ctx, getPostsForFeedAfterDate,
		arg.FeedID,
		arg.PublishedAt,
		arg.Limit,
		arg.Userid,
		arg.Unviewed,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetPostsForFeedAfterDateRow
	for rows.Next() {
		var i GetPostsForFeedAfterDateRow
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Title,
			&i.Description,
			&i.PublishedAt,
			&i.Audio,
			&i.Duration,
			&i.FeedID,
			&i.FeedName,
			&i.Viewed,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getPostsForFeedAsc = `-- name: GetPostsForFeedAsc :many
SELECT posts.id, posts.created_at, posts.updated_at, posts.title, posts.description, posts.published_at, posts.audio, posts.duration, posts.feed_id, feeds.name AS feed_name,
CASE 
    WHEN post_views.id IS NOT NULL THEN TRUE
    ELSE FALSE
END AS viewed
FROM posts 
JOIN feeds ON posts.feed_id = feeds.id
LEFT JOIN post_views ON posts.id = post_views.post_id AND ($3::uuid IS NULL OR $3::uuid = post_views.user_id)
WHERE feed_id = $1 AND ($4::bool = FALSE OR post_views.id IS NULL)
ORDER BY published_at Asc 
LIMIT $2
`

type GetPostsForFeedAscParams struct {
	FeedID   uuid.UUID
	Limit    int32
	Userid   uuid.UUID
	Unviewed bool
}

type GetPostsForFeedAscRow struct {
	ID          uuid.UUID
	CreatedAt   time.Time
	UpdatedAt   time.Time
	Title       string
	Description sql.NullString
	PublishedAt time.Time
	Audio       string
	Duration    sql.NullString
	FeedID      uuid.UUID
	FeedName    string
	Viewed      bool
}

func (q *Queries) GetPostsForFeedAsc(ctx context.Context, arg GetPostsForFeedAscParams) ([]GetPostsForFeedAscRow, error) {
	rows, err := q.db.QueryContext(ctx, getPostsForFeedAsc,
		arg.FeedID,
		arg.Limit,
		arg.Userid,
		arg.Unviewed,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetPostsForFeedAscRow
	for rows.Next() {
		var i GetPostsForFeedAscRow
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Title,
			&i.Description,
			&i.PublishedAt,
			&i.Audio,
			&i.Duration,
			&i.FeedID,
			&i.FeedName,
			&i.Viewed,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getPostsForFeedBeforeDate = `-- name: GetPostsForFeedBeforeDate :many
SELECT posts.id, posts.created_at, posts.updated_at, posts.title, posts.description, posts.published_at, posts.audio, posts.duration, posts.feed_id, feeds.name AS feed_name,
CASE 
    WHEN post_views.id IS NOT NULL THEN TRUE
    ELSE FALSE
END AS viewed
FROM posts
JOIN feeds ON posts.feed_id = feeds.id
LEFT JOIN post_views ON posts.id = post_views.post_id AND ($4::uuid IS NULL OR $4::uuid = post_views.user_id)
WHERE feed_id = $1 AND published_at < $2 AND ($5::bool = FALSE OR post_views.id IS NULL)
ORDER BY published_at DESC 
LIMIT $3
`

type GetPostsForFeedBeforeDateParams struct {
	FeedID      uuid.UUID
	PublishedAt time.Time
	Limit       int32
	Userid      uuid.UUID
	Unviewed    bool
}

type GetPostsForFeedBeforeDateRow struct {
	ID          uuid.UUID
	CreatedAt   time.Time
	UpdatedAt   time.Time
	Title       string
	Description sql.NullString
	PublishedAt time.Time
	Audio       string
	Duration    sql.NullString
	FeedID      uuid.UUID
	FeedName    string
	Viewed      bool
}

func (q *Queries) GetPostsForFeedBeforeDate(ctx context.Context, arg GetPostsForFeedBeforeDateParams) ([]GetPostsForFeedBeforeDateRow, error) {
	rows, err := q.db.QueryContext(ctx, getPostsForFeedBeforeDate,
		arg.FeedID,
		arg.PublishedAt,
		arg.Limit,
		arg.Userid,
		arg.Unviewed,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetPostsForFeedBeforeDateRow
	for rows.Next() {
		var i GetPostsForFeedBeforeDateRow
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Title,
			&i.Description,
			&i.PublishedAt,
			&i.Audio,
			&i.Duration,
			&i.FeedID,
			&i.FeedName,
			&i.Viewed,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getPostsForUser = `-- name: GetPostsForUser :many
SELECT posts.id, posts.created_at, posts.updated_at, posts.title, posts.description, posts.published_at, posts.audio, posts.duration, posts.feed_id, feeds.name AS feed_name,
CASE 
    WHEN post_views.id IS NOT NULL THEN TRUE
    ELSE FALSE
END AS viewed
FROM posts 
JOIN feed_follows ON posts.feed_id = feed_follows.feed_id
JOIN feeds ON posts.feed_id = feeds.id
LEFT JOIN post_views ON posts.id = post_views.post_id
WHERE feed_follows.user_id = $1 AND post_views.id IS NULL
ORDER BY posts.published_at DESC 
LIMIT $2
`

type GetPostsForUserParams struct {
	UserID uuid.UUID
	Limit  int32
}

type GetPostsForUserRow struct {
	ID          uuid.UUID
	CreatedAt   time.Time
	UpdatedAt   time.Time
	Title       string
	Description sql.NullString
	PublishedAt time.Time
	Audio       string
	Duration    sql.NullString
	FeedID      uuid.UUID
	FeedName    string
	Viewed      bool
}

func (q *Queries) GetPostsForUser(ctx context.Context, arg GetPostsForUserParams) ([]GetPostsForUserRow, error) {
	rows, err := q.db.QueryContext(ctx, getPostsForUser, arg.UserID, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetPostsForUserRow
	for rows.Next() {
		var i GetPostsForUserRow
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Title,
			&i.Description,
			&i.PublishedAt,
			&i.Audio,
			&i.Duration,
			&i.FeedID,
			&i.FeedName,
			&i.Viewed,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
