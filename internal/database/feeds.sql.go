// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.22.0
// source: feeds.sql

package database

import (
	"context"
	"database/sql"
	"encoding/json"
	"time"

	"github.com/google/uuid"
)

const createFeed = `-- name: CreateFeed :one
INSERT INTO feeds (id, created_at, updated_at, name, description, image, url)
VALUES ($1, $2, $3, $4, $5, $6, $7)
RETURNING id, created_at, updated_at, name, description, url, last_fetched_at, image
`

type CreateFeedParams struct {
	ID          uuid.UUID
	CreatedAt   time.Time
	UpdatedAt   time.Time
	Name        string
	Description sql.NullString
	Image       sql.NullString
	Url         string
}

func (q *Queries) CreateFeed(ctx context.Context, arg CreateFeedParams) (Feed, error) {
	row := q.db.QueryRowContext(ctx, createFeed,
		arg.ID,
		arg.CreatedAt,
		arg.UpdatedAt,
		arg.Name,
		arg.Description,
		arg.Image,
		arg.Url,
	)
	var i Feed
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Name,
		&i.Description,
		&i.Url,
		&i.LastFetchedAt,
		&i.Image,
	)
	return i, err
}

const getFeedForID = `-- name: GetFeedForID :one
SELECT feeds.id AS id, feeds.name, feeds.description, feeds.image, feeds.url, JSON_AGG((category.id, category.title)) AS categories 
FROM feeds
LEFT JOIN feed_categories ON feeds.id = feed_categories.feed_id
LEFT JOIN category ON feed_categories.category_id = category.id
WHERE feeds.id = $1
GROUP BY feeds.id
`

type GetFeedForIDRow struct {
	ID          uuid.UUID
	Name        string
	Description sql.NullString
	Image       sql.NullString
	Url         string
	Categories  json.RawMessage
}

func (q *Queries) GetFeedForID(ctx context.Context, id uuid.UUID) (GetFeedForIDRow, error) {
	row := q.db.QueryRowContext(ctx, getFeedForID, id)
	var i GetFeedForIDRow
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.Image,
		&i.Url,
		&i.Categories,
	)
	return i, err
}

const getFeeds = `-- name: GetFeeds :many
SELECT feeds.id AS id, feeds.name, feeds.description, feeds.image, feeds.url, JSON_AGG((category.id, category.title)) AS categories 
FROM feeds
LEFT JOIN feed_categories ON feeds.id = feed_categories.feed_id
LEFT JOIN category ON feed_categories.category_id = category.id
GROUP BY feeds.id
`

type GetFeedsRow struct {
	ID          uuid.UUID
	Name        string
	Description sql.NullString
	Image       sql.NullString
	Url         string
	Categories  json.RawMessage
}

func (q *Queries) GetFeeds(ctx context.Context) ([]GetFeedsRow, error) {
	rows, err := q.db.QueryContext(ctx, getFeeds)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetFeedsRow
	for rows.Next() {
		var i GetFeedsRow
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Description,
			&i.Image,
			&i.Url,
			&i.Categories,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getFeedsForCategory = `-- name: GetFeedsForCategory :many
SELECT feeds.id AS id, feeds.name, feeds.description, feeds.image, feeds.url, JSON_AGG((category.id, category.title)) AS categories 
FROM feeds
LEFT JOIN feed_categories ON feeds.id = feed_categories.feed_id
LEFT JOIN category ON feed_categories.category_id = category.id
WHERE category.id = $1
GROUP BY feeds.id
`

type GetFeedsForCategoryRow struct {
	ID          uuid.UUID
	Name        string
	Description sql.NullString
	Image       sql.NullString
	Url         string
	Categories  json.RawMessage
}

func (q *Queries) GetFeedsForCategory(ctx context.Context, id uuid.UUID) ([]GetFeedsForCategoryRow, error) {
	rows, err := q.db.QueryContext(ctx, getFeedsForCategory, id)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetFeedsForCategoryRow
	for rows.Next() {
		var i GetFeedsForCategoryRow
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Description,
			&i.Image,
			&i.Url,
			&i.Categories,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getNextFeedsToFetch = `-- name: GetNextFeedsToFetch :many
SELECT id, created_at, updated_at, name, description, url, last_fetched_at, image FROM feeds
ORDER BY last_fetched_at NULLS FIRST
LIMIT $1
`

func (q *Queries) GetNextFeedsToFetch(ctx context.Context, limit int32) ([]Feed, error) {
	rows, err := q.db.QueryContext(ctx, getNextFeedsToFetch, limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Feed
	for rows.Next() {
		var i Feed
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Name,
			&i.Description,
			&i.Url,
			&i.LastFetchedAt,
			&i.Image,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const markFeedAsFetched = `-- name: MarkFeedAsFetched :one
UPDATE feeds
SET last_fetched_at = NOW(),
updated_at = NOW()
WHERE id = $1
RETURNING id, created_at, updated_at, name, description, url, last_fetched_at, image
`

func (q *Queries) MarkFeedAsFetched(ctx context.Context, id uuid.UUID) (Feed, error) {
	row := q.db.QueryRowContext(ctx, markFeedAsFetched, id)
	var i Feed
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Name,
		&i.Description,
		&i.Url,
		&i.LastFetchedAt,
		&i.Image,
	)
	return i, err
}
